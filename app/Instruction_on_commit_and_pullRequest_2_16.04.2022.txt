-------------------------

ИСХОДНЫЕ ДАННЫЕ:

Исходные данные для работы с Git в нашем проекте:

1. Сессия на GitHub:
Username: newveterinar
Пароль: cba6c5t4+3e=1v
E-mail: newveterinar@mail.ru
Токен (бессрочный), созданный Андреем (avkhakhalin): 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
Новый токен, созданный Татьяной (Tati1909): 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

2. Данные электронной почты:
Почта: newveterinar@mail.ru
Пароль: vet1c2a3+5b=6c

-------------------------

ВВЕДЕНИЕ:

За основу данной инструкции положена статья, осмысленная и адаптированная к нашей команде: https://habr.com/ru/post/106912/
Предлагаю использовать аналогичный подход при работе с GIT,
за исключением веток "hotfix" и "release".
Не уверен, что у нас хватит опыта склеить две конфигурации проекта в случае множественных конфликтов.
Ведь исправление какой-то ошибки может иметь разные причины, затрагивающие несколько классов.
Тут может быть и просчёт в архитектуре проекта. Тогда мы зависнем окончательно.
На основании прорешённых за текущее время обучения проблем, понял, что не каждую ошибку можно быстро найти.
Часто откатывался до стабильно рабочей версии и её заново осмысленно дорабатывал. Так было несколько раз, 
пока ошибка не уходила вследствии выбора другого пути решения задачи или она не проявлялась вследствии повторения 
одного и того же решения. Когда же код будет большой, то на поиск ошибки может уйти много времени. А если параллельно
команда будет модернизировать код, то, скорее всего, будут конфликты, которые собрать будет сложно.
Предлагаю минимизировать риски и отказаться от ветки "hotfix".
Также, поскольку проект у нас не большой, то от ветки "release" можно отказаться.
Вместо неё будем сбрасывать наши версии приложения сразу в ветку "master" и ставить для неё соответствующие теги.
Поэтому предлагаю баги и ошибки в версиях решать в ветке "develop", отправляя туда на доработку наше приложение.
Поиск ошибки в версии приложения осуществлять всем сразу. Одна голова хорошо, а 6 ещё лучше.

ВАЖНО:
Слова релиз и версия в настоящем документе являются синонимомами.

-------------------------

ОПИСАНИЕ ИСПОЛЬЗУЕМЫХ ВЕТОК:

В нашем репозитории будут следующие ветки:
"master" -> "develop" -> "features" -> "ИМЯ РАЗРАБОТЧИКА"
Схема связей веток находится в файле "Git-branching-model.pdf".

Описание веток:
"master" - ветка, в которой будут хранится наши релизы приложения с определёнными тегами, их характеризующими. Именно эти версии нашего приложения мы будем показывать нашему ветеринарному врачу для тестирования в процессе разработки данного приложения. Если в версии приложения, размещённом на ветке "master" находится ошибка, то, если уже начата работа над другим релизом, то эта ошибка устраняется в другом релизе, а если ошибка выявляется сразу и она мешает пользоваться приложением, то данный релиз отправляется в ветку "develop", где устраняется ошибка, тестируется приложение и потом опять перемещаем его в ветку "master".

"develop" - ветка, в которой происходит сборка нашего приложения из различных функциональных элементов. Из этой ветки 
каждый разработчик создаёт свою ветку "feature_*" и работает над своей функциональной частью приложения. А потом в неё
добавляет свой кодом. На основании количества добавленных в приложение функций, принимается решение о переводе текущей версии приложения в ветку "master". В ветке "develop" наш релиз приложения будет тестироваться и, в случае успешного завершения тестирования, отправится в ветку "master" Для присвоения ему нового тега и уже тестирования со стороны конечного пользователя (нашего ветеринарного врача). Пожелания от ветеринарного врача будут добавляться в новый релиз приложения.

"features" - ветка, в которую складываются все функциональные вещи (фичи) нашего приложения. Она создаётся из ветки "develop". От ветки "features" разработчиками создаются ветки "feature_*" которые индивидуально или совместно с кем-то разрабатывают какую-то функциональную вещь. В названии ветки присутствует символ "*", который обозначает, краткое название этой вещи. Например: "feature_recyclerView", "feature_addNewText", "feature_showWindowAbout", "feature_saveDataToBD", "feature_createDI", "feature_createMaketWindowCalc" и т.п. Желательно по характерным словам в названии ветки понимать что же там делается. Естественно, названия веток, выходящих из одного коммита должны быть уникальными.

"ИМЯ РАЗРАБОТЧИКА" - ветки для совместной работы в рамках создания какой-нибудь функциональной вещи (фичи). Например, от ранее созданной ветки "feature_createMaketWindowCalc" отходят две ветки "tkayasat" (или "Olga") и "Tati1909" (или "Tatiana"). В результате, при работе с макетом для окна калькулятора появляются, например, три ветки: 
"feature_createMaketWindowCalc" - сюда будет прикрепляться промежуточный (для совместного тестирования) и финальный результат (для совместного тестирования и интеграции данной вещи (фичи) в ветку "features" от Оли и Тани;
"tkayasat" - ветка, в которой работает Ольга;
"Tati1909" - ветка, в которой работает Татьяна.
В процессе работы над какой-нибудь фичей может потребоваться привлечение какого-нибудь дополнительного разработчика. Поэтому количество людей может быть расширено (до 6 человек) или наоборот убавлено (до 1 человека).

-------------------------

ТЕХНИЧЕСКОЕ СЛИЯНИЕ МЕЖДУ ВЕТКАМИ:

ВАЖНО:
1. Перед тем, как управлять сливанием веток, обязательно нужно убедиться, что данный разработчик имеет в проекте статус "Collaborator". В этом случае, он имеет права на запись и от него засчитываются одобрения. Иначе, в процессе обработки пулл-реквеста все выданные данным разработчиком подтверждения (approve) будут не засчитаны: "At least 1 approving review is required by reviewers with write access" - это сообщение не даст возможность снять сообщение "Review required".
2. Для того, чтобы получить статус "Collaborator" нужно быть приглашённым в проект от пользователя "newveterinar". Перечень наших имён на github.com: 
	Егонская Ольга 	- tkayasat
	Татьяна Гойшик 	- Tati1909
	Захаров Роман 	- kpahapk
	Скрипин Андрей 	- andreysc1976
	Федорченко Максим - Shaparapatah
	Хахалин Андрей 	- AVKhakhalin
После отправки приглашения, разработчик, которого пригласили в проект, должен, если он находится в сессии "newveterinar", то ОБЯЗАТЕЛЬНО ИЗ НЕЁ ВЫЙТИ.
После этого, нужно проверить свою электронную почту.
Найти там письмо от GitHub.
Зайти в него и нажать на кнопку "View Invitation".
После этого в бразере появится сайт github.com, где ему будет предложено ввести свой логин и пароль для входа в него, а после этого, появится страница с кнопкой подтверждением приглашения в проект. Её нужно будет нажать.
После этого, обязательно проверьте в сессии "newveterinar" свой статус. 
В нашем проекте нам придётся это делать всего один раз.
Но для тестовых проектов это нужно будет делать каждый раз.
3. Нельзя удалять приглашённого в проект разработчика (нажимать на кнопку "Remove" в списке приглашённых в проект разработчиков). Поскольку если его один раз из проекта удалить, то второй раз уже его нельзя пригласить в этот проект.

Ветки будут сливаться только при перемещении в сторону ветки мастер. При движении от ветки мастер в направлении ветки "feauture" и т.п. перенос содержимого репозитория на новую ветку осуществляется всего-лишь созданием новой ветки с соответствующим названием: "develop", "features", "feature_*", "ИМЯ РАЗРАБОТЧИКА".

Для сливания веток "feature_*", "ИМЯ РАЗРАБОТЧИКА" с "features" нужно выбирать 
	"Squash and merge", чтобы влить одну ветку в другую, убрав вливаемые ветки;
	потом нужно нажать на кнопку "Confirm squash and merge".
	потом можно нажать на кнопку "Delete branch", чтобы немного почистить наше дерево (желательно чистить дерево, так как оно быстро заполнится ветками с вашими именами, а создать новые ветки с вашими именами нельзя, пока старые либо не будут переименованы, либо удалены);
В этом случае будет ровная ветка.
Если не нажимать кнопку "Delete branch", то будут оставаться в дереве веток отростки.

-------------------------

АНАЛИЗ ПУЛЛ-РЕКВЕСТА:

При просмотре изменений нужно оставлять свои комментарии, а после этого нажать на кнопку "Review changes":
Для этого нужно нажать в нужной строке на знак "+" и добавить свой комментарий, нажав на кнопку "Start a review":
"Всё в порядке" или "Что-то нужно исправить" и т.п.
После этого нужно нажать на переключатель:
	"Comment" (для оставления комментария);
	"Approve" (когда подтверждается правильность изменений);
	"Request changes" (когда нужно изменить запрос).

После этого, автор запроса отвечает на каждый запрос, оставляя свой встречный комментарий:
Пишет в текстовом поле (где есть hint: "Reply..."), а потом нажимает на кнопку "Start a review".

После устранения замечаний опять делается коммит.
В названии такого коммита нужно переформулировать в утвердительной форме выполненное изменение.
Нажать на кнопку "Commit and push".

Для подтверждения изменений нужно нажать на кнопку "Resolve converstaion" при просмотре пулл-реквеста.

-------------------------

СОЗДАНИЕ ПУЛЛ-РЕКВЕСТА В СТУДИИ:

Для создание пулл-реквеста в студии нужно сначала выбрать нужную ветку, которую мы хотим куда-то прикрепить.

ДЛЯ ВЕРСИИ BUMBELBEE
Потом выбрать в верхнем меню пункт "GIT",
далее, выбрать подпункт "GITHUB",
далее, выбрать подпункт "Create Pull Request..." и нажать на него левой кнопкой мышки.

ДЛЯ ВЕРСИИИ 4.2.2
(Потом выбрать в верхнем меню пункт "VCS",
далее, выбрать подпункт "GIT", 
далее, выбрать подпункт "Create Pull Request" и нажать на него левой кнопкой мышки).

Если у вас подключены в студии несколько аккаунтов, то нужно выбрать свой аккаунт и нажать на кнопку "Choose":
	Егонская Ольга - tkayasat
	Татьяна Гойшик - Tati1909
	Захаров Роман - kpahapk
	Скрипин Андрей - andreysc1976
	Федорченко Максим - Shaparapatah
	Хахалин Андрей - AVKhakhalin
Потому что создавать коммиты в аккаунте "newveterinar" в нашем проекте нельзя. Тогда не понятно будет, кто этот коммит реально создал.

ДЛЯ ВЕРСИИ BUMBELBEE
Появится форма, в которой вам нужно будет справа будет текущая ветка, а слева нужно выбрать ветку, в которую вы хотите передать коммиты с текущей ветки.
Ветка, в которую будут переданы коммиты, это ветка, в которую направлена стрелочка.
Далее, нужно заполнить поле "Title", озаглавив кратко передаваемые коммиты.
Далее, нужно заполнить поле "Description", в котором тезисно указать что в каждом коммите содержится.
Потом нажать на кнопку "Create Pull Request".

ВАЖНО:
1. Если коммиты передаются в ветки "master", "develop" или "features", то для обработки данных пулл-реквестов, нужно зайти на github.com в сессию "newveterinar" и обработать там пулл-реквесты (пока я буду доступен, этой работой буду заниматься я, просто отпишитесь в нашей группе телеграмм о том, что нужно обработать пулл-реквест; когда он будет обработан, то вам отпишусь в ответ).
2. Если коммиты передаются в ветки "features_*" или "ИМЯ РАЗРАБОТЧИКА", то можно обработать пулл-реквест непосредственно в студии после нажатия на кнопку "Create Pull Request". Советую это делать в студии, поскольку в ней легче работать над конфликтами, а также не тратить время на хождение на github.com. Данные пулл-реквесты не планирую обрабатывать, поскольку тут вам даётся свобода проявить все полученные знания совместно с кем-то из коллектива разработчиков фичи.

ДЛЯ ВЕРСИИ 4.2.2
(Появится форма, в которой вам нужно будет выбрать "Base branch:".
ВАЖНО:
"Base branch" это ветка, к которой мы хотим прикрепить выбранную нашу ветку, поэтому выбираем название ветки, к которой мы прикрепляем нашу ветку.
После этого, обязательно заполняем поле "Description" и нажимаем кнопку "OK")

-------------------------

ПОДКЛЮЧЕНИЕ ТОКЕНА В СТУДИИ:

Подключение токена в студии для сессии "newveterinar"
(нужно для тестирования коммитов и пулл-реквестов, 
а таже тем членам команды, кто будет отвечать за слияние результатов
с веткой мастер):
1. Зайти в "Settings".
2. Выбрать раздел "Version Control".
3. Выбрать пункт "GitHub".
4. Нажать справа на кнопку "+".
5. Выбрать пункт "Log in with Token...".
6. Вставить текущий токен: 
	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
	или
	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
	или 
        можете в сессии "newveterinar" сделать себе отдельный токен.
   Если он не сработает (то нужно обновить токен в сессии "newveterinar" на "github.com").
7. Нажать на кнопку "Add Account".
8. После этого, нужно будет кликнуть левой кнопкой мышки на один из аккаунтов
   и нажать на кнопку "V" справа для выбора для того, чтобы сделать его по-умолчанию ("Set as Default"),
   чтобы каждый раз не выбирать аккаунт.
ВАЖНО:
1. При работе по проекту каждый из нас будет работать в своей текущей сессии, 
в этом случае в общей картине веток и коммитов будет понятно, кто что сделал.
Для объединения результатов, полученных на текущей ветке, с веткой мастером,
создаётся пулл-реквест и в теллеграмме в нашей группе "VeterinarGroup" 
отправляется запрос на проверку данного пулл-реквеста и его мержа с веткой мастер.
Текущий ответственный человек в этот момент (начну я, когда буду не доступен,
то меня подменит кто-нибудь другой из нашей команды) заходит в сессию "newveterinar"
и от туда выполняет необходимые действия для объединения результатов.
2. Перед созданием пулл-реквеста, пожалуйста, проверяйте свою работу
на корректный запуск приложения, а также на выполнения приложением заложенных вами действий.

-------------------------

СОЗДАНИЕ ПРОЕКТА И НАСТРОКА ПРАВИЛ НА ВЕТКИ:

Создание проекта (важно для тестирования коммитов и пулл-реквестов,
а также для создания нашего проекта) выполняется в сессии "newveterinar":
1. Создаётся открытый проект.
2. В настройках "Settings" добавляются "Collaborators".
3. Для веток "master", "develop" и "features" нужно создать следующие правила 
	(для этого нужно зайти в настройки, далее в Branches, 
 	далее, нажать на кнопку "Add rule"):
	0) в поле Branch name pattern вводим имя ветки
	ставим галочки:
	1) Require a pull request before merging
           (необходимость создания пулл-реквестов)
		1.1) Require approvals
		     (необходимость подтверждений изменений)
		- Required number of approvals before merging: 1
		  (количество людей, необходимых для подтверждения изменений преед слиянием)
	2) Require status check to pass before merging
           (осуществлять проверку перед тем, как коммит будет запушен в другую ветку)
           (дожидаться, пока коллаборанты не подтвердят свои действия)
	3) Require conversation resolution before merging
           (любые обсуждения должны быть закрыты)
	4) Reqire linear history
           (создание линейной истории)
	5) Нажать на кнопку "Create".
	После создания такого проавила только владелец может закоммитеть на ветке мастер изменения, 
        а другие участники проекта не смогу это сделать.

ВАЖНО:
Для веток "feature_*" и "ИМЯ РАЗРАБОТЧИКА" предлагаю не создавать правил, 
так как там будет идти интенсивная работа над созданием фич, поэтому нужно дать разработчикам большую свободу действий. Вот когда фича будет создана, то её вливание в общую коллекцию фич потребует детального анализа что это и как сделано, а также разрешение конфликтов.

-------------------------

УДАЛЕНИЕ ВЕТКИ, ОШИБОЧНО СОЗДАННОЙ В ЛОКАЛЬНОМ РЕПОЗИТОРИИ:

Чтобы не плодить мусора, можно удалить ошибочно созданную ветку в локальном репозитории в студии следующим образом:
1. Переключаемся на ветку, находящуюся не более, чем на один уровень ниже удаляемой ветки.
2. Переходим в раздел "Terminal".
3. Набираем команду:
git branch -d <ИМЯ ВЕТКИ>
Пример удаления ветки с имененем "proba":
git branch -d proba

ВАЖНО:
1. Находясь в сессии "newveterinar", не удалить ветку "master".
2. Удаление веток в удалённом репозитории осуществляется только через сессию "newveterinar" при общей информированности команды.

-------------------------

СОЗДАНИЕ ВЕТКИ: 

При создании ветки пишем "develop", "features", "feature_НАЗВАНИЕ ФИЧИ" или "ИМЯ РАЗРАБОТЧИКА" в зависимости от того, какие создаются ветки. Других веток разработчики в проекте создавать не должны.

Когда сливаются ветки "develop" и "features", соответственно, в "master" и "develop", то от веток "master", "develop", нужно будет создать новые ветки "develop" и "features". Однако ветки в репозитории могут быть только уникальными. Поэтому перед созданием новых веток "develop" и "features" нужно переименовать старые ветки "develop" и "features", соответственно, в "develop_НОМЕР ТЕГА ВЕРСИИ" и "features_НОМЕР ТЕГА ВЕРСИИ". А после этого, уже создавать новые ветки "develop" и "features".
Чтобы переименовать ветку в локальном репозитории, нужно выбрать её правой кнопкой мышки и в появившемся поле ввести новое имя ветки.
Чтобы переименовать ветку в удалённом репозитории, нужно зайти на github.com в сессию "newveterinar", выбрать кнопку "branches", далее, перемотать на подраздел "Active branches", найти ветку для переименования и напротив неё справа нажать на карандаш. В появившемся поле ввести новое имя для ветки. После этого нажать на кнопку "Rename branch" и обновить страницу браузера. Далее, зайти в студию и нажать на кнопку "Fetch All Remotes" с изображением стрелочки, направленной вниз и влево, расположенной слева окна "Git".


ВАЖНО:
ПОСЛЕ СОЗДАНИЯ ВЕТКИ СРАЗУ ЖЕ В НЕЙ ДЕЛАЕМ КОММИТ!
В коммите пишем, что такая-то ветка создана. 
Для этого предлагаю создать файл "Logbranches.txt" в репозитории и в него писать такую информацию.

-------------------------

ПРОСМОТР ВЕТОК В КОНСОЛИ:

Для просмотра веток в консоли нужно сделать следующее:
1. Переключиться на закладку "Terminal", расположенную в нижней части экрана.
2. В текущее место курсора добавить следующую строку:
git log --all --graph --decorate --oneline

Пример появляющегося дерева:
:...skipping...
* 3bfd027 (HEAD -> master, tag: v.1.0, origin/master) Создан первый релиз приложения (#6)
| * 4896632 (origin/develop, develop) Подготовлен тост с кнопкой (#5)
| | * 4d2622f (origin/features, features) Добавили кнопку (#4)
| | | * 2ec4b6f (origin/feature_buttonCreate, feature_buttonCreate) Merge pull request #3
| | | | * 56037b9 (origin/avkhakhalin) Добавили слушателя к кнопке.
| | | | * 2c9450e Создали кнопку
| | | |/
| | | * c6b0146 Начинаем разработку кнопки
| | |/
| | * 10dcd94 feature_toast (#2)
| | | * 2363c17 (origin/feature_toast, feature_toast) Создали элемент Toast (#1)
| | | * d05e538 Начинаем разработку Toast
| | |/
| | * 6cb63f6 Создана ветка Feature
| |/
| * 774fea6 Создана ветка Develop
|/
* d79cd32 Initial commit


-------------------------

ВИДЫ РАБОТ РАЗРАБОТЧИКОВ:

Есть три вида работ:
1. Каждый разработчик работает в своей ветке.
2. Каждый разработчик создаёт отдельную ветку для своей фичи и работает над ней.
3. Разработчик работает в чужой ветке, чтобы подменить человека (человек временно или совсем вышел из коллектива или ему нужно помочь). Потом когда эту ветку принимаем, то эту ветку мерджим.

-------------------------

РАБОТА С ВЕТКАМИ В СТУДИИ:

Для того, чтобы получить последнюю версию кода, нужно выделить последнюю точку на ветке мастер и нажать правую кнопку, в появившемся меню выбрать Branch/Master/Checkout.

Для того, чтобы в студии увидеть общий вид веток с коммитами нужно зайти 
в закладку "9: Git", 
далее, в закладку "Log",
далее, нажать на строчку "Local".
Чтобы увидеть коммиты на конкретной ветке, нужно кликнуть на её название.

ВАЖНО:
Разница между командами pull и fetch:
При использовании pull, git сливает любые внесённые коммиты в ветку, в которой вы сейчас работаете. Команда pull автоматически сливает коммиты, не давая вам сначала просмотреть их. Если вы не пристально следите за ветками, выполнение этой команды может привести к частым конфликтам.
При использовании fetch, git собирает все коммиты из целевой ветки, которых нет в текущей ветке, и сохраняет их в локальном репозитории. Однако он не сливает их в текущую ветку. Это особенно полезно, если вам нужно постоянно обновлять свой репозиторий, но вы работаете над функциональностью, неправильная реализация которой может негативно сказаться на проекте в целом. Чтобы слить коммиты в основную ветвь, нужно использовать merge.
Т.е. git pull — это шоткод для последовательности двух команд: git fetch (получение изменений с сервера) и git merge (сливание в локальную копию).
Поэтому, когда вы отправили пулл-реквест, то проверить состояние нужно только командой fetch.

Действия с ветками в студии версии Bumblebee:
1. Сразу же после того, как вы отправили пулл-реквест на присоединение ветки "A" к ветке "B":
	1) в разделе "GIT" внизу экрана нажать на НИЖНЮЮ стрелочку вниз-влево "Fetch All Remotes", расположенную слева экрана;
	2) в разделе "GIT" внизу экрана нажать левой кнопкой мышки на ветку "B", далее, нажать на ВЕРХНЮЮ стрелочку вниз-влево "Update Selected", расположенную слева экрана.
После этого, у вас обновится содержимое репозитория "Remote", а также содержимое ветки "B".
2. После объединения командной работы над созданием фичи предлагаю удалять собственные ветки с именами разработчиков. Для этого нужно выделить такую ветку и нажать в разделе "GIT" внизу экрана на изображени корзины слева экрана.

--------------------------

ЗАДАЧКИ ДЛЯ ТЕСТИРОВАНИЯ:
1. Создание проекта в сессии "newveterinar".
2. Установка правил на ветку "master".
2. Приглашение коллаборантов для проекта.
3. Создание пулл-реквестов.
4. Одобрение пулл-реквестов и слияние веток в ветку "master".
5. Разрешение конфликтов.
6. Загрузка данных с репозитория через команду pull.
7. Загрузка данных с репозитория через команду fetch.
8. Добавить на ветку "master" правила.
ВАЖНО:
9. Провести работу с ветками "features", "feature_*", "ИМЯ РАЗРАБОТЧИКА":
	1) от ветки "master" создать ветку "develop", потом ветку "features", потом ветку "feature_НАЗВАНИЕ ФИЧИ", потом ветку "ИМЯ РАЗРАБОТЧИКА" (свой логин в git);
	2) установка правил на ветки "develop" и "features";
	3) написать что-нибудь в ветке "ИМЯ РАЗРАБОТЧИКА", сделать коммит, потом пулл-реквест на ветку "feature_НАЗВАНИЕ ФИЧИ" делает один разработчик, потом делает тоже самое другой разработчик;
	4) потом один из разработчиков заходит в сессию "newveterinar" и обрабатывает пулл-реквест своего коллеги;
	5) потом другой разработчик заходит в сессию "newveterinar" и обрабатывает пулл-реквест своего коллеги.
	6) просмотреть результат в студии.
	7) кто-нибудь из разработчиков делает пулл-реквест от ветки "feature_НАЗВАНИЕ ФИЧИ" в ветку "features".

--------------------

Вопросы к нашему преподавателю:
1. Что делать с изменениями во вспомогательных файлах в процессе работы с конфликтами и подключением библиотек?
